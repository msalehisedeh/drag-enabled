{"version":3,"sources":["ng://drag-enabled/src/app/drag-enabled/datatransfer.ts","ng://drag-enabled/src/app/drag-enabled/drop.directive.ts","ng://drag-enabled/src/app/drag-enabled/drag.directive.ts","ng://drag-enabled/src/app/drag-enabled/drag-only.directive.ts","ng://drag-enabled/src/app/drag-enabled/dragdrop.module.ts"],"names":["DataTransfer","prototype","setData","name","value","this","data","getData","Injectable","DropDirective","dataTransfer","el","event","EventEmitter","createDropEvent","source","destination","medium","node","nativeElement","clientX","clientY","drop","preventDefault","dropEvent","classList","remove","dropEnabled","onDrop","emit","dragEnter","dropEffect","add","onDragEnter","dragLeave","onDragLeave","dragOver","onDragOver","Directive","args","selector","ElementRef","Input","Output","HostListener","DragDirective","dragStart","stopPropagation","rect","getBoundingClientRect","dragEvent","offset","x","left","y","top","dragEnabled","effectAllowed","dragEffect","onDragStart","drag","onDrag","dragEnd","onDragEnd","host","[draggable]","DragInDocumentDirective","dragInDocument","DragDropModule","NgModule","imports","CommonModule","declarations","exports","entryComponents","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["/*\r\n * The main purpose for this object is to fix the short coming of drag event dataTransfer object.\r\n * It accepts only String values. However, if there is a need to pass an object, this singletoncan \r\n * come to the resecue. \r\n */\r\nimport { Injectable, Inject  } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class DataTransfer {\r\n    \r\n    private data: any = {};\r\n\r\n    constructor() {}\r\n\r\n    setData(name, value){\r\n        this.data[name] = value;\r\n    }\r\n\r\n    getData(name) {\r\n        return this.data[name];\r\n    }\r\n            \r\n}","import {\r\n    Directive,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n    EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { DataTransfer } from './datatransfer';\r\nimport { DropEvent } from './drag-drop.interfaces';\r\n\r\n\r\n@Directive({\r\n    selector: '[dropEnabled]'\r\n})\r\nexport class DropDirective {\r\n    \r\n    @Input('medium')\r\n    medium: any;\r\n        \r\n    @Input()\r\n    dropEffect = \"move\";\r\n        \r\n    @Input(\"dropEnabled\")\r\n    dropEnabled = (event: DropEvent) => true;\r\n\r\n    @Output()\r\n    onDragEnter: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragLeave: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDrop: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragOver: EventEmitter<any> = new EventEmitter();\r\n\r\n    constructor(\r\n        private dataTransfer: DataTransfer,\r\n        private el: ElementRef\r\n    ) {}\r\n    \r\n\tprivate createDropEvent(event): DropEvent {\r\n\t\treturn {\r\n            source: this.dataTransfer.getData(\"source\"),\r\n            destination: {\r\n                medium: this.medium,\r\n                node: this.el.nativeElement,\r\n                clientX: event.clientX,\r\n                clientY: event.clientY\r\n            }\r\n\t\t};\r\n\t}\r\n\r\n    @HostListener('drop', ['$event'])\r\n    drop(event) {\r\n        event.preventDefault();\r\n        const dropEvent = this.createDropEvent(event);\r\n\r\n        this.el.nativeElement.classList.remove(\"drag-over\");\r\n\r\n        if (this.dropEnabled(dropEvent)) {\r\n            this.onDrop.emit(dropEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('dragenter', ['$event']) \r\n    dragEnter(event) {\r\n        event.preventDefault();\r\n        const dropEvent = this.createDropEvent(event);\r\n\r\n        if (this.dropEnabled(dropEvent)) {\r\n            event.dataTransfer.dropEffect = this.dropEffect;\r\n\r\n            this.el.nativeElement.classList.add(\"drag-over\");\r\n            this.onDragEnter.emit(dropEvent);\r\n        } else {\r\n            this.el.nativeElement.classList.remove(\"drag-over\");\r\n        }\r\n    }\r\n    \r\n    @HostListener('dragleave', ['$event']) \r\n    dragLeave(event) {\r\n        event.preventDefault();\r\n                \r\n        this.el.nativeElement.classList.remove(\"drag-over\");\r\n        this.onDragLeave.emit(event);\r\n    }\r\n    \r\n    @HostListener('dragover', ['$event']) \r\n    dragOver(event) {\r\n        const dropEvent = this.createDropEvent(event);\r\n\r\n        if (this.dropEnabled(dropEvent)) {\r\n            event.preventDefault();\r\n            this.el.nativeElement.classList.add(\"drag-over\");\r\n            this.onDragOver.emit(dropEvent);\r\n        } else {\r\n            this.el.nativeElement.classList.remove(\"drag-over\");\r\n        }\r\n    }\r\n}","import {\r\n    Directive,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n    EventEmitter\r\n} from '@angular/core';\r\nimport { DataTransfer } from './datatransfer';\r\nimport { DragEvent } from './drag-drop.interfaces';\r\n\r\n@Directive({\r\n    selector: '[dragEnabled]',\r\n    host: {\r\n        '[draggable]': 'true'\r\n    }\r\n})\r\nexport class DragDirective {\r\n    \r\n    @Input(\"medium\")\r\n    medium: any;\r\n    \r\n    @Input(\"dragEffect\")\r\n    dragEffect = \"move\";\r\n    \r\n    @Input(\"dragEnabled\")\r\n    dragEnabled = (event) => true;\r\n    \r\n    @Output()\r\n    onDragStart: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragEnd: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDrag: EventEmitter<any> = new EventEmitter();\r\n    \r\n    private handle: any;\r\n        \r\n    constructor(\r\n        private dataTransfer: DataTransfer,\r\n        private el: ElementRef\r\n    ) {\r\n    }\r\n\r\n    @HostListener('dragstart', ['$event']) \r\n    dragStart(event) {\r\n        event.stopPropagation();\r\n\r\n        const rect = this.el.nativeElement.getBoundingClientRect();\r\n        const dragEvent: DragEvent = {\r\n            medium: this.medium,\r\n            node: this.el.nativeElement,\r\n            clientX: event.clientX,\r\n            clientY: event.clientY,\r\n            offset: {\r\n                x: event.clientX - rect.left, \r\n                y: event.clientY - rect.top\r\n            }\r\n        }\r\n        if (this.dragEnabled(dragEvent)) {\r\n            event.dataTransfer.effectAllowed = this.dragEffect;\r\n            event.dataTransfer.setData(\"makeItTick\",\"true\");// this is needed just to make drag/drop event trigger.\r\n\r\n            this.dataTransfer.setData(\"source\", dragEvent);\r\n            this.onDragStart.emit(dragEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('drag', ['$event']) \r\n    drag(event) {\r\n        const dragEvent: DragEvent = this.dataTransfer.getData(\"source\");\r\n\r\n        dragEvent.clientX = event.clientX;\r\n        dragEvent.clientY = event.clientY;\r\n        \r\n        if (this.dragEnabled(dragEvent)) {\r\n            this.onDrag.emit(dragEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('dragend', ['$event']) \r\n    dragEnd(event) {\r\n        event.stopPropagation();\r\n        const dragEvent: DragEvent = this.dataTransfer.getData(\"source\");        \r\n        this.onDragEnd.emit(dragEvent);\r\n        this.el.nativeElement.classList.remove(\"drag-over\");\r\n    }\r\n}\r\n","/*\r\n * This directive is best suited for dragging an element with confinement of document.  it is not recomended\r\n * to be used in conjunction with a drop operation if an element is to be dropped on another element within \r\n * a heirarchy of nodes.\r\n */\r\nimport {\r\n    Directive,\r\n    ElementRef,\r\n    HostListener,\r\n    Input,\r\n    Output,\r\n    EventEmitter\r\n} from '@angular/core';\r\nimport { DataTransfer } from './datatransfer';\r\nimport { DragEvent } from './drag-drop.interfaces';\r\n\r\n@Directive({\r\n    selector: '[dragInDocument]',\r\n    host: {\r\n        '[draggable]': 'true'\r\n    }\r\n})\r\nexport class DragInDocumentDirective {\r\n    \r\n    @Input(\"medium\")\r\n    medium: any;\r\n    \r\n    @Input(\"dragEffect\")\r\n    dragEffect = \"move\";\r\n    \r\n    @Input(\"dragInDocument\")\r\n    dragInDocument = (event) => true;\r\n    \r\n    @Output()\r\n    onDragStart: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDragEnd: EventEmitter<any> = new EventEmitter();\r\n    \r\n    @Output()\r\n    onDrag: EventEmitter<any> = new EventEmitter();\r\n    \r\n    private handle: any;\r\n        \r\n    constructor(\r\n        private dataTransfer: DataTransfer,\r\n        private el: ElementRef\r\n    ) {\r\n    }\r\n\r\n    @HostListener('dragstart', ['$event']) \r\n    dragStart(event) {\r\n        event.stopPropagation();\r\n\r\n        const rect = this.el.nativeElement.getBoundingClientRect();\r\n        const dragEvent: DragEvent = {\r\n            medium: this.medium,\r\n            node: this.el.nativeElement,\r\n            clientX: event.clientX,\r\n            clientY: event.clientY,\r\n            offset: {\r\n                x: event.clientX - rect.left, \r\n                y: event.clientY - rect.top\r\n            }\r\n        }\r\n        if (this.dragInDocument(dragEvent)) {\r\n            event.dataTransfer.effectAllowed = this.dragEffect;\r\n            event.dataTransfer.setData(\"makeItTick\",\"true\");// this is needed just to make drag/drop event trigger.\r\n\r\n            this.dataTransfer.setData(\"source\", dragEvent);\r\n            this.onDragStart.emit(dragEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('document:dragover', ['$event']) \r\n    drag(event) {\r\n        const dragEvent: DragEvent = this.dataTransfer.getData(\"source\");\r\n\r\n        dragEvent.clientX = event.clientX;\r\n        dragEvent.clientY = event.clientY;\r\n        \r\n        if (this.dragInDocument(dragEvent)) {\r\n            this.onDrag.emit(dragEvent);\r\n        }\r\n    }\r\n    \r\n    @HostListener('document:dragend', ['$event']) \r\n    dragEnd(event) {\r\n        event.stopPropagation();\r\n        const dragEvent: DragEvent = this.dataTransfer.getData(\"source\");        \r\n        this.onDragEnd.emit(dragEvent);\r\n        this.el.nativeElement.classList.remove(\"drag-over\");\r\n    }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DataTransfer } from './datatransfer';\r\nimport { DragDirective } from './drag.directive';\r\nimport { DragInDocumentDirective } from './drag-only.directive';\r\nimport { DropDirective } from './drop.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n\tCommonModule\r\n  ],\r\n  declarations: [\r\n\tDragDirective,\r\n    DragInDocumentDirective,\r\n\tDropDirective\r\n  ],\r\n  exports: [\r\n\tDragDirective,\r\n\tDragInDocumentDirective,\r\n\tDropDirective\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n    DataTransfer\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class DragDropModule {}\r\n"]}